
R_term_d.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000770  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000770  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb1  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  00001485  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c2  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000061d  00000000  00000000  000025b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  7a:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
	lcd_cmd(0x06); // Entry mode, increment cursor
	lcd_cmd(0x01); // Clear display
}

void lcd_cmd(uint8_t cmd){
	PORTC &= ~(1 << RS); // RS = 0 for command
  82:	95 b3       	in	r25, 0x15	; 21
  84:	9f 77       	andi	r25, 0x7F	; 127
  86:	95 bb       	out	0x15, r25	; 21
	PORTD = cmd; // Put command on data bus
  88:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1 << E); // Enable pulse
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	00 00       	nop
	_delay_us(1);
	PORTC &= ~(1 << E); // Disable pulse
  92:	85 b3       	in	r24, 0x15	; 21
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	83 ef       	ldi	r24, 0xF3	; 243
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_cmd+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_cmd+0x20>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <lcd_init>:
		_delay_ms(1000); // Delay for 1 second
	}
}

void lcd_init(void){
	DDRD = 0xFF; // Set PORTD as output for LCD data
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	81 bb       	out	0x11, r24	; 17
	DDRC |= ((1 << E) | (1 << RS)); // Set RS and E as output
  aa:	84 b3       	in	r24, 0x14	; 20
  ac:	80 6c       	ori	r24, 0xC0	; 192
  ae:	84 bb       	out	0x14, r24	; 20
  b0:	87 ea       	ldi	r24, 0xA7	; 167
  b2:	91 e6       	ldi	r25, 0x61	; 97
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_init+0xe>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_init+0x14>
  ba:	00 00       	nop
	_delay_ms(100); // Delay for LCD power on
	lcd_cmd(0x38); // Function set: 8-bit, 2 line, 5x7 dots
  bc:	88 e3       	ldi	r24, 0x38	; 56
  be:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0E); // Display on, cursor on
  c2:	8e e0       	ldi	r24, 0x0E	; 14
  c4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x06); // Entry mode, increment cursor
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x01); // Clear display
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  d4:	08 95       	ret

000000d6 <lcd_data>:
	PORTC &= ~(1 << E); // Disable pulse
	_delay_ms(2); // Wait for command to be processed
}

void lcd_data(char data){
	PORTC |= (1 << RS); // RS = 1 for data
  d6:	95 b3       	in	r25, 0x15	; 21
  d8:	90 68       	ori	r25, 0x80	; 128
  da:	95 bb       	out	0x15, r25	; 21
	PORTD = data; // Put data on data bus
  dc:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1 << E); // Enable pulse
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	00 00       	nop
	_delay_us(1);
	PORTC &= ~(1 << E); // Disable pulse
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	8f 7b       	andi	r24, 0xBF	; 191
  ea:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	83 ef       	ldi	r24, 0xF3	; 243
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_data+0x1a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_data+0x20>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <lcd_print>:
	_delay_ms(2); // Wait for data to be processed
}

void lcd_print(char *str) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
	while (*str) {
 100:	03 c0       	rjmp	.+6      	; 0x108 <lcd_print+0xe>
		lcd_data(*str++); // Send characters one by one
 102:	21 96       	adiw	r28, 0x01	; 1
 104:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_data>
	PORTC &= ~(1 << E); // Disable pulse
	_delay_ms(2); // Wait for data to be processed
}

void lcd_print(char *str) {
	while (*str) {
 108:	88 81       	ld	r24, Y
 10a:	81 11       	cpse	r24, r1
 10c:	fa cf       	rjmp	.-12     	; 0x102 <lcd_print+0x8>
		lcd_data(*str++); // Send characters one by one
	}
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col) {
	uint8_t address = (row == 0 ? 0x80 : 0xC0) + col; // Set cursor position
 114:	81 11       	cpse	r24, r1
 116:	02 c0       	rjmp	.+4      	; 0x11c <lcd_set_cursor+0x8>
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	01 c0       	rjmp	.+2      	; 0x11e <lcd_set_cursor+0xa>
 11c:	80 ec       	ldi	r24, 0xC0	; 192
	lcd_cmd(address); // Send command to set cursor
 11e:	86 0f       	add	r24, r22
 120:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 124:	08 95       	ret

00000126 <int_to_string_fixed>:
}

void int_to_string_fixed(char* buffer, int value, uint8_t width) {
 126:	fc 01       	movw	r30, r24
 128:	cb 01       	movw	r24, r22
	if (value < 0) {
 12a:	99 23       	and	r25, r25
 12c:	3c f4       	brge	.+14     	; 0x13c <int_to_string_fixed+0x16>
		*buffer++ = '-'; // Add minus sign for negative values
 12e:	2d e2       	ldi	r18, 0x2D	; 45
 130:	20 83       	st	Z, r18
		value = -value;
 132:	91 95       	neg	r25
 134:	81 95       	neg	r24
 136:	91 09       	sbc	r25, r1
		width--;
 138:	41 50       	subi	r20, 0x01	; 1
	lcd_cmd(address); // Send command to set cursor
}

void int_to_string_fixed(char* buffer, int value, uint8_t width) {
	if (value < 0) {
		*buffer++ = '-'; // Add minus sign for negative values
 13a:	31 96       	adiw	r30, 0x01	; 1
		value = -value;
		width--;
	}
	buffer += width; // Move to the end of the buffer
 13c:	24 2f       	mov	r18, r20
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	df 01       	movw	r26, r30
 142:	a2 0f       	add	r26, r18
 144:	b3 1f       	adc	r27, r19
	*buffer-- = '\0'; // Null-terminate the string
 146:	21 50       	subi	r18, 0x01	; 1
 148:	31 09       	sbc	r19, r1
 14a:	e2 0f       	add	r30, r18
 14c:	f3 1f       	adc	r31, r19
 14e:	1c 92       	st	X, r1
	for (int i = 0; i < width; i++) {
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	12 c0       	rjmp	.+36     	; 0x17a <int_to_string_fixed+0x54>
		if (value > 0) {
 156:	18 16       	cp	r1, r24
 158:	19 06       	cpc	r1, r25
 15a:	54 f4       	brge	.+20     	; 0x170 <int_to_string_fixed+0x4a>
			*buffer-- = (value % 10) + '0'; // Convert digit to character
 15c:	6a e0       	ldi	r22, 0x0A	; 10
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	0e 94 8e 03 	call	0x71c	; 0x71c <__divmodhi4>
 164:	80 5d       	subi	r24, 0xD0	; 208
 166:	80 83       	st	Z, r24
			value /= 10;
 168:	86 2f       	mov	r24, r22
 16a:	97 2f       	mov	r25, r23
	}
	buffer += width; // Move to the end of the buffer
	*buffer-- = '\0'; // Null-terminate the string
	for (int i = 0; i < width; i++) {
		if (value > 0) {
			*buffer-- = (value % 10) + '0'; // Convert digit to character
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	03 c0       	rjmp	.+6      	; 0x176 <int_to_string_fixed+0x50>
			value /= 10;
			} else {
			*buffer-- = '0'; // Fill remaining width with zeros
 170:	50 e3       	ldi	r21, 0x30	; 48
 172:	50 83       	st	Z, r21
 174:	31 97       	sbiw	r30, 0x01	; 1
		value = -value;
		width--;
	}
	buffer += width; // Move to the end of the buffer
	*buffer-- = '\0'; // Null-terminate the string
	for (int i = 0; i < width; i++) {
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	64 2f       	mov	r22, r20
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	26 17       	cp	r18, r22
 180:	37 07       	cpc	r19, r23
 182:	4c f3       	brlt	.-46     	; 0x156 <int_to_string_fixed+0x30>
			value /= 10;
			} else {
			*buffer-- = '0'; // Fill remaining width with zeros
		}
	}
}
 184:	08 95       	ret

00000186 <display_temperature>:

void display_temperature(int temperature) {
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	60 97       	sbiw	r28, 0x10	; 16
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	8c 01       	movw	r16, r24
	char buffer[16];
	
	lcd_set_cursor(0, 0);  // Set cursor to the beginning of the first line
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_set_cursor>
	int_to_string_fixed(buffer, temperature, 4); // Convert temperature to string
 1a8:	44 e0       	ldi	r20, 0x04	; 4
 1aa:	b8 01       	movw	r22, r16
 1ac:	ce 01       	movw	r24, r28
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	0e 94 93 00 	call	0x126	; 0x126 <int_to_string_fixed>
	lcd_print("Temp:"); // Print label
 1b4:	80 e6       	ldi	r24, 0x60	; 96
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_print>
	lcd_print(buffer); // Print temperature
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_print>
	lcd_print("_C"); // Print Celsius symbol
 1c4:	86 e6       	ldi	r24, 0x66	; 102
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_print>
}
 1cc:	60 96       	adiw	r28, 0x10	; 16
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	08 95       	ret

000001e2 <spi_init>:

void spi_init(void) {
	DDRB = (1 << PB7) | (1 << PB4) | (1 << PB5); // Set MOSI, SCK, and CS as output
 1e2:	80 eb       	ldi	r24, 0xB0	; 176
 1e4:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6); // Set MISO as input
 1e6:	87 b3       	in	r24, 0x17	; 23
 1e8:	8f 7b       	andi	r24, 0xBF	; 191
 1ea:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR); // Enable SPI, set as master
 1ec:	80 e5       	ldi	r24, 0x50	; 80
 1ee:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);  // Enable double speed
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	8e b9       	out	0x0e, r24	; 14
 1f4:	08 95       	ret

000001f6 <spi_transfer>:
}

uint8_t spi_transfer(uint8_t data) {
	SPDR = data; // Start transmission
 1f6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF))); // Wait for transmission complete
 1f8:	77 9b       	sbis	0x0e, 7	; 14
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <spi_transfer+0x2>
	return SPDR; // Return received data
 1fc:	8f b1       	in	r24, 0x0f	; 15
}
 1fe:	08 95       	ret

00000200 <read_mcp3208>:

uint16_t read_mcp3208(uint8_t channel) {
 200:	cf 93       	push	r28
 202:	c8 2f       	mov	r28, r24
	uint8_t command = 0x18 | (channel >> 1); // Construct command byte
 204:	86 95       	lsr	r24
	uint8_t msb, lsb;

	PORTB &= ~(1 << CS);  // CS Low to start communication
 206:	98 b3       	in	r25, 0x18	; 24
 208:	9f 7e       	andi	r25, 0xEF	; 239
 20a:	98 bb       	out	0x18, r25	; 24
	spi_transfer(command); // Send command
 20c:	88 61       	ori	r24, 0x18	; 24
 20e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <spi_transfer>
	msb = spi_transfer(channel << 6); // Send channel information
 212:	8c 2f       	mov	r24, r28
 214:	82 95       	swap	r24
 216:	88 0f       	add	r24, r24
 218:	88 0f       	add	r24, r24
 21a:	80 7c       	andi	r24, 0xC0	; 192
 21c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <spi_transfer>
 220:	c8 2f       	mov	r28, r24
	lsb = spi_transfer(0x00); // Receive lower byte
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <spi_transfer>
	PORTB |= (1 << CS);  // CS High to end communication
 228:	98 b3       	in	r25, 0x18	; 24
 22a:	90 61       	ori	r25, 0x10	; 16
 22c:	98 bb       	out	0x18, r25	; 24

	return ((msb & 0x0F) << 8) | lsb; // Combine bytes to get 12-bit result
 22e:	cf 70       	andi	r28, 0x0F	; 15
 230:	2c 2f       	mov	r18, r28
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	32 2f       	mov	r19, r18
 236:	22 27       	eor	r18, r18
}
 238:	a9 01       	movw	r20, r18
 23a:	48 2b       	or	r20, r24
 23c:	ca 01       	movw	r24, r20
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <get_temperature>:

int get_temperature(uint16_t adc_value) {
 242:	8f 92       	push	r8
 244:	9f 92       	push	r9
 246:	af 92       	push	r10
 248:	bf 92       	push	r11
 24a:	cf 92       	push	r12
 24c:	df 92       	push	r13
 24e:	ef 92       	push	r14
 250:	ff 92       	push	r15
	float voltage = adc_value * (5.0 / 4096.0); // Convert ADC value to voltage
 252:	bc 01       	movw	r22, r24
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 93 02 	call	0x526	; 0x526 <__floatunsisf>
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	40 ea       	ldi	r20, 0xA0	; 160
 262:	5a e3       	ldi	r21, 0x3A	; 58
 264:	0e 94 21 03 	call	0x642	; 0x642 <__mulsf3>
 268:	6b 01       	movw	r12, r22
 26a:	7c 01       	movw	r14, r24
	float resistance = (voltage * 1000.0) / (5.0 - voltage); // Calculate RTD resistance
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	4a e7       	ldi	r20, 0x7A	; 122
 272:	54 e4       	ldi	r21, 0x44	; 68
 274:	0e 94 21 03 	call	0x642	; 0x642 <__mulsf3>
 278:	4b 01       	movw	r8, r22
 27a:	5c 01       	movw	r10, r24
 27c:	a7 01       	movw	r20, r14
 27e:	96 01       	movw	r18, r12
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	80 ea       	ldi	r24, 0xA0	; 160
 286:	90 e4       	ldi	r25, 0x40	; 64
 288:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__subsf3>
 28c:	9b 01       	movw	r18, r22
 28e:	ac 01       	movw	r20, r24
 290:	c5 01       	movw	r24, r10
 292:	b4 01       	movw	r22, r8
 294:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__divsf3>
	
	float calibration_offset = 0.0; // Calibration offset
	float calibration_slope = 1.0;  // Calibration slope

	int temperature = (int)(((resistance - 100.0) / 0.385) * calibration_slope + calibration_offset); // Calculate temperature
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	48 ec       	ldi	r20, 0xC8	; 200
 29e:	52 e4       	ldi	r21, 0x42	; 66
 2a0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__subsf3>
 2a4:	28 eb       	ldi	r18, 0xB8	; 184
 2a6:	3e e1       	ldi	r19, 0x1E	; 30
 2a8:	45 ec       	ldi	r20, 0xC5	; 197
 2aa:	5e e3       	ldi	r21, 0x3E	; 62
 2ac:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__divsf3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	a9 01       	movw	r20, r18
 2b6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__addsf3>
 2ba:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__fixsfsi>

	return temperature;
}
 2be:	cb 01       	movw	r24, r22
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	cf 90       	pop	r12
 2c8:	bf 90       	pop	r11
 2ca:	af 90       	pop	r10
 2cc:	9f 90       	pop	r9
 2ce:	8f 90       	pop	r8
 2d0:	08 95       	ret

000002d2 <main>:
uint16_t read_mcp3208(uint8_t channel);
int get_temperature(uint16_t adc_value);

int main(void)
{
	lcd_init(); // Initialize the LCD
 2d2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_init>
	spi_init(); // Initialize SPI communication
 2d6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_init>
	
	while (1)
	{
		uint16_t adc_value = read_mcp3208(0); // Read ADC value from channel 0
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 00 01 	call	0x200	; 0x200 <read_mcp3208>
		int temperature = get_temperature(adc_value); // Convert ADC value to temperature
 2e0:	0e 94 21 01 	call	0x242	; 0x242 <get_temperature>
		
		display_temperature(temperature); // Display the temperature on the LCD
 2e4:	0e 94 c3 00 	call	0x186	; 0x186 <display_temperature>
 2e8:	2f e3       	ldi	r18, 0x3F	; 63
 2ea:	8d e0       	ldi	r24, 0x0D	; 13
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0x1c>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0x26>
 2f8:	00 00       	nop
 2fa:	ef cf       	rjmp	.-34     	; 0x2da <main+0x8>

000002fc <__subsf3>:
 2fc:	50 58       	subi	r21, 0x80	; 128

000002fe <__addsf3>:
 2fe:	bb 27       	eor	r27, r27
 300:	aa 27       	eor	r26, r26
 302:	0e 94 96 01 	call	0x32c	; 0x32c <__addsf3x>
 306:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_round>
 30a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_pscA>
 30e:	38 f0       	brcs	.+14     	; 0x31e <__addsf3+0x20>
 310:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_pscB>
 314:	20 f0       	brcs	.+8      	; 0x31e <__addsf3+0x20>
 316:	39 f4       	brne	.+14     	; 0x326 <__addsf3+0x28>
 318:	9f 3f       	cpi	r25, 0xFF	; 255
 31a:	19 f4       	brne	.+6      	; 0x322 <__addsf3+0x24>
 31c:	26 f4       	brtc	.+8      	; 0x326 <__addsf3+0x28>
 31e:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_nan>
 322:	0e f4       	brtc	.+2      	; 0x326 <__addsf3+0x28>
 324:	e0 95       	com	r30
 326:	e7 fb       	bst	r30, 7
 328:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>

0000032c <__addsf3x>:
 32c:	e9 2f       	mov	r30, r25
 32e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_split3>
 332:	58 f3       	brcs	.-42     	; 0x30a <__addsf3+0xc>
 334:	ba 17       	cp	r27, r26
 336:	62 07       	cpc	r22, r18
 338:	73 07       	cpc	r23, r19
 33a:	84 07       	cpc	r24, r20
 33c:	95 07       	cpc	r25, r21
 33e:	20 f0       	brcs	.+8      	; 0x348 <__addsf3x+0x1c>
 340:	79 f4       	brne	.+30     	; 0x360 <__addsf3x+0x34>
 342:	a6 f5       	brtc	.+104    	; 0x3ac <__addsf3x+0x80>
 344:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_zero>
 348:	0e f4       	brtc	.+2      	; 0x34c <__addsf3x+0x20>
 34a:	e0 95       	com	r30
 34c:	0b 2e       	mov	r0, r27
 34e:	ba 2f       	mov	r27, r26
 350:	a0 2d       	mov	r26, r0
 352:	0b 01       	movw	r0, r22
 354:	b9 01       	movw	r22, r18
 356:	90 01       	movw	r18, r0
 358:	0c 01       	movw	r0, r24
 35a:	ca 01       	movw	r24, r20
 35c:	a0 01       	movw	r20, r0
 35e:	11 24       	eor	r1, r1
 360:	ff 27       	eor	r31, r31
 362:	59 1b       	sub	r21, r25
 364:	99 f0       	breq	.+38     	; 0x38c <__addsf3x+0x60>
 366:	59 3f       	cpi	r21, 0xF9	; 249
 368:	50 f4       	brcc	.+20     	; 0x37e <__addsf3x+0x52>
 36a:	50 3e       	cpi	r21, 0xE0	; 224
 36c:	68 f1       	brcs	.+90     	; 0x3c8 <__addsf3x+0x9c>
 36e:	1a 16       	cp	r1, r26
 370:	f0 40       	sbci	r31, 0x00	; 0
 372:	a2 2f       	mov	r26, r18
 374:	23 2f       	mov	r18, r19
 376:	34 2f       	mov	r19, r20
 378:	44 27       	eor	r20, r20
 37a:	58 5f       	subi	r21, 0xF8	; 248
 37c:	f3 cf       	rjmp	.-26     	; 0x364 <__addsf3x+0x38>
 37e:	46 95       	lsr	r20
 380:	37 95       	ror	r19
 382:	27 95       	ror	r18
 384:	a7 95       	ror	r26
 386:	f0 40       	sbci	r31, 0x00	; 0
 388:	53 95       	inc	r21
 38a:	c9 f7       	brne	.-14     	; 0x37e <__addsf3x+0x52>
 38c:	7e f4       	brtc	.+30     	; 0x3ac <__addsf3x+0x80>
 38e:	1f 16       	cp	r1, r31
 390:	ba 0b       	sbc	r27, r26
 392:	62 0b       	sbc	r22, r18
 394:	73 0b       	sbc	r23, r19
 396:	84 0b       	sbc	r24, r20
 398:	ba f0       	brmi	.+46     	; 0x3c8 <__addsf3x+0x9c>
 39a:	91 50       	subi	r25, 0x01	; 1
 39c:	a1 f0       	breq	.+40     	; 0x3c6 <__addsf3x+0x9a>
 39e:	ff 0f       	add	r31, r31
 3a0:	bb 1f       	adc	r27, r27
 3a2:	66 1f       	adc	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	88 1f       	adc	r24, r24
 3a8:	c2 f7       	brpl	.-16     	; 0x39a <__addsf3x+0x6e>
 3aa:	0e c0       	rjmp	.+28     	; 0x3c8 <__addsf3x+0x9c>
 3ac:	ba 0f       	add	r27, r26
 3ae:	62 1f       	adc	r22, r18
 3b0:	73 1f       	adc	r23, r19
 3b2:	84 1f       	adc	r24, r20
 3b4:	48 f4       	brcc	.+18     	; 0x3c8 <__addsf3x+0x9c>
 3b6:	87 95       	ror	r24
 3b8:	77 95       	ror	r23
 3ba:	67 95       	ror	r22
 3bc:	b7 95       	ror	r27
 3be:	f7 95       	ror	r31
 3c0:	9e 3f       	cpi	r25, 0xFE	; 254
 3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__addsf3x+0x9a>
 3c4:	b0 cf       	rjmp	.-160    	; 0x326 <__addsf3+0x28>
 3c6:	93 95       	inc	r25
 3c8:	88 0f       	add	r24, r24
 3ca:	08 f0       	brcs	.+2      	; 0x3ce <__addsf3x+0xa2>
 3cc:	99 27       	eor	r25, r25
 3ce:	ee 0f       	add	r30, r30
 3d0:	97 95       	ror	r25
 3d2:	87 95       	ror	r24
 3d4:	08 95       	ret

000003d6 <__divsf3>:
 3d6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divsf3x>
 3da:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_round>
 3de:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_pscB>
 3e2:	58 f0       	brcs	.+22     	; 0x3fa <__divsf3+0x24>
 3e4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_pscA>
 3e8:	40 f0       	brcs	.+16     	; 0x3fa <__divsf3+0x24>
 3ea:	29 f4       	brne	.+10     	; 0x3f6 <__divsf3+0x20>
 3ec:	5f 3f       	cpi	r21, 0xFF	; 255
 3ee:	29 f0       	breq	.+10     	; 0x3fa <__divsf3+0x24>
 3f0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>
 3f4:	51 11       	cpse	r21, r1
 3f6:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_szero>
 3fa:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_nan>

000003fe <__divsf3x>:
 3fe:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_split3>
 402:	68 f3       	brcs	.-38     	; 0x3de <__divsf3+0x8>

00000404 <__divsf3_pse>:
 404:	99 23       	and	r25, r25
 406:	b1 f3       	breq	.-20     	; 0x3f4 <__divsf3+0x1e>
 408:	55 23       	and	r21, r21
 40a:	91 f3       	breq	.-28     	; 0x3f0 <__divsf3+0x1a>
 40c:	95 1b       	sub	r25, r21
 40e:	55 0b       	sbc	r21, r21
 410:	bb 27       	eor	r27, r27
 412:	aa 27       	eor	r26, r26
 414:	62 17       	cp	r22, r18
 416:	73 07       	cpc	r23, r19
 418:	84 07       	cpc	r24, r20
 41a:	38 f0       	brcs	.+14     	; 0x42a <__divsf3_pse+0x26>
 41c:	9f 5f       	subi	r25, 0xFF	; 255
 41e:	5f 4f       	sbci	r21, 0xFF	; 255
 420:	22 0f       	add	r18, r18
 422:	33 1f       	adc	r19, r19
 424:	44 1f       	adc	r20, r20
 426:	aa 1f       	adc	r26, r26
 428:	a9 f3       	breq	.-22     	; 0x414 <__divsf3_pse+0x10>
 42a:	35 d0       	rcall	.+106    	; 0x496 <__divsf3_pse+0x92>
 42c:	0e 2e       	mov	r0, r30
 42e:	3a f0       	brmi	.+14     	; 0x43e <__divsf3_pse+0x3a>
 430:	e0 e8       	ldi	r30, 0x80	; 128
 432:	32 d0       	rcall	.+100    	; 0x498 <__divsf3_pse+0x94>
 434:	91 50       	subi	r25, 0x01	; 1
 436:	50 40       	sbci	r21, 0x00	; 0
 438:	e6 95       	lsr	r30
 43a:	00 1c       	adc	r0, r0
 43c:	ca f7       	brpl	.-14     	; 0x430 <__divsf3_pse+0x2c>
 43e:	2b d0       	rcall	.+86     	; 0x496 <__divsf3_pse+0x92>
 440:	fe 2f       	mov	r31, r30
 442:	29 d0       	rcall	.+82     	; 0x496 <__divsf3_pse+0x92>
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	88 1f       	adc	r24, r24
 44a:	bb 1f       	adc	r27, r27
 44c:	26 17       	cp	r18, r22
 44e:	37 07       	cpc	r19, r23
 450:	48 07       	cpc	r20, r24
 452:	ab 07       	cpc	r26, r27
 454:	b0 e8       	ldi	r27, 0x80	; 128
 456:	09 f0       	breq	.+2      	; 0x45a <__divsf3_pse+0x56>
 458:	bb 0b       	sbc	r27, r27
 45a:	80 2d       	mov	r24, r0
 45c:	bf 01       	movw	r22, r30
 45e:	ff 27       	eor	r31, r31
 460:	93 58       	subi	r25, 0x83	; 131
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	3a f0       	brmi	.+14     	; 0x474 <__divsf3_pse+0x70>
 466:	9e 3f       	cpi	r25, 0xFE	; 254
 468:	51 05       	cpc	r21, r1
 46a:	78 f0       	brcs	.+30     	; 0x48a <__divsf3_pse+0x86>
 46c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>
 470:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_szero>
 474:	5f 3f       	cpi	r21, 0xFF	; 255
 476:	e4 f3       	brlt	.-8      	; 0x470 <__divsf3_pse+0x6c>
 478:	98 3e       	cpi	r25, 0xE8	; 232
 47a:	d4 f3       	brlt	.-12     	; 0x470 <__divsf3_pse+0x6c>
 47c:	86 95       	lsr	r24
 47e:	77 95       	ror	r23
 480:	67 95       	ror	r22
 482:	b7 95       	ror	r27
 484:	f7 95       	ror	r31
 486:	9f 5f       	subi	r25, 0xFF	; 255
 488:	c9 f7       	brne	.-14     	; 0x47c <__divsf3_pse+0x78>
 48a:	88 0f       	add	r24, r24
 48c:	91 1d       	adc	r25, r1
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
 492:	97 f9       	bld	r25, 7
 494:	08 95       	ret
 496:	e1 e0       	ldi	r30, 0x01	; 1
 498:	66 0f       	add	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	88 1f       	adc	r24, r24
 49e:	bb 1f       	adc	r27, r27
 4a0:	62 17       	cp	r22, r18
 4a2:	73 07       	cpc	r23, r19
 4a4:	84 07       	cpc	r24, r20
 4a6:	ba 07       	cpc	r27, r26
 4a8:	20 f0       	brcs	.+8      	; 0x4b2 <__divsf3_pse+0xae>
 4aa:	62 1b       	sub	r22, r18
 4ac:	73 0b       	sbc	r23, r19
 4ae:	84 0b       	sbc	r24, r20
 4b0:	ba 0b       	sbc	r27, r26
 4b2:	ee 1f       	adc	r30, r30
 4b4:	88 f7       	brcc	.-30     	; 0x498 <__divsf3_pse+0x94>
 4b6:	e0 95       	com	r30
 4b8:	08 95       	ret

000004ba <__fixsfsi>:
 4ba:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fixunssfsi>
 4be:	68 94       	set
 4c0:	b1 11       	cpse	r27, r1
 4c2:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_szero>
 4c6:	08 95       	ret

000004c8 <__fixunssfsi>:
 4c8:	0e 94 00 03 	call	0x600	; 0x600 <__fp_splitA>
 4cc:	88 f0       	brcs	.+34     	; 0x4f0 <__fixunssfsi+0x28>
 4ce:	9f 57       	subi	r25, 0x7F	; 127
 4d0:	98 f0       	brcs	.+38     	; 0x4f8 <__fixunssfsi+0x30>
 4d2:	b9 2f       	mov	r27, r25
 4d4:	99 27       	eor	r25, r25
 4d6:	b7 51       	subi	r27, 0x17	; 23
 4d8:	b0 f0       	brcs	.+44     	; 0x506 <__fixunssfsi+0x3e>
 4da:	e1 f0       	breq	.+56     	; 0x514 <__fixunssfsi+0x4c>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	1a f0       	brmi	.+6      	; 0x4ec <__fixunssfsi+0x24>
 4e6:	ba 95       	dec	r27
 4e8:	c9 f7       	brne	.-14     	; 0x4dc <__fixunssfsi+0x14>
 4ea:	14 c0       	rjmp	.+40     	; 0x514 <__fixunssfsi+0x4c>
 4ec:	b1 30       	cpi	r27, 0x01	; 1
 4ee:	91 f0       	breq	.+36     	; 0x514 <__fixunssfsi+0x4c>
 4f0:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_zero>
 4f4:	b1 e0       	ldi	r27, 0x01	; 1
 4f6:	08 95       	ret
 4f8:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_zero>
 4fc:	67 2f       	mov	r22, r23
 4fe:	78 2f       	mov	r23, r24
 500:	88 27       	eor	r24, r24
 502:	b8 5f       	subi	r27, 0xF8	; 248
 504:	39 f0       	breq	.+14     	; 0x514 <__fixunssfsi+0x4c>
 506:	b9 3f       	cpi	r27, 0xF9	; 249
 508:	cc f3       	brlt	.-14     	; 0x4fc <__fixunssfsi+0x34>
 50a:	86 95       	lsr	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b3 95       	inc	r27
 512:	d9 f7       	brne	.-10     	; 0x50a <__fixunssfsi+0x42>
 514:	3e f4       	brtc	.+14     	; 0x524 <__fixunssfsi+0x5c>
 516:	90 95       	com	r25
 518:	80 95       	com	r24
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	08 95       	ret

00000526 <__floatunsisf>:
 526:	e8 94       	clt
 528:	09 c0       	rjmp	.+18     	; 0x53c <__floatsisf+0x12>

0000052a <__floatsisf>:
 52a:	97 fb       	bst	r25, 7
 52c:	3e f4       	brtc	.+14     	; 0x53c <__floatsisf+0x12>
 52e:	90 95       	com	r25
 530:	80 95       	com	r24
 532:	70 95       	com	r23
 534:	61 95       	neg	r22
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	8f 4f       	sbci	r24, 0xFF	; 255
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	99 23       	and	r25, r25
 53e:	a9 f0       	breq	.+42     	; 0x56a <__floatsisf+0x40>
 540:	f9 2f       	mov	r31, r25
 542:	96 e9       	ldi	r25, 0x96	; 150
 544:	bb 27       	eor	r27, r27
 546:	93 95       	inc	r25
 548:	f6 95       	lsr	r31
 54a:	87 95       	ror	r24
 54c:	77 95       	ror	r23
 54e:	67 95       	ror	r22
 550:	b7 95       	ror	r27
 552:	f1 11       	cpse	r31, r1
 554:	f8 cf       	rjmp	.-16     	; 0x546 <__floatsisf+0x1c>
 556:	fa f4       	brpl	.+62     	; 0x596 <__floatsisf+0x6c>
 558:	bb 0f       	add	r27, r27
 55a:	11 f4       	brne	.+4      	; 0x560 <__floatsisf+0x36>
 55c:	60 ff       	sbrs	r22, 0
 55e:	1b c0       	rjmp	.+54     	; 0x596 <__floatsisf+0x6c>
 560:	6f 5f       	subi	r22, 0xFF	; 255
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	16 c0       	rjmp	.+44     	; 0x596 <__floatsisf+0x6c>
 56a:	88 23       	and	r24, r24
 56c:	11 f0       	breq	.+4      	; 0x572 <__floatsisf+0x48>
 56e:	96 e9       	ldi	r25, 0x96	; 150
 570:	11 c0       	rjmp	.+34     	; 0x594 <__floatsisf+0x6a>
 572:	77 23       	and	r23, r23
 574:	21 f0       	breq	.+8      	; 0x57e <__floatsisf+0x54>
 576:	9e e8       	ldi	r25, 0x8E	; 142
 578:	87 2f       	mov	r24, r23
 57a:	76 2f       	mov	r23, r22
 57c:	05 c0       	rjmp	.+10     	; 0x588 <__floatsisf+0x5e>
 57e:	66 23       	and	r22, r22
 580:	71 f0       	breq	.+28     	; 0x59e <__floatsisf+0x74>
 582:	96 e8       	ldi	r25, 0x86	; 134
 584:	86 2f       	mov	r24, r22
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	2a f0       	brmi	.+10     	; 0x596 <__floatsisf+0x6c>
 58c:	9a 95       	dec	r25
 58e:	66 0f       	add	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	da f7       	brpl	.-10     	; 0x58c <__floatsisf+0x62>
 596:	88 0f       	add	r24, r24
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	97 f9       	bld	r25, 7
 59e:	08 95       	ret

000005a0 <__fp_inf>:
 5a0:	97 f9       	bld	r25, 7
 5a2:	9f 67       	ori	r25, 0x7F	; 127
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	08 95       	ret

000005ac <__fp_nan>:
 5ac:	9f ef       	ldi	r25, 0xFF	; 255
 5ae:	80 ec       	ldi	r24, 0xC0	; 192
 5b0:	08 95       	ret

000005b2 <__fp_pscA>:
 5b2:	00 24       	eor	r0, r0
 5b4:	0a 94       	dec	r0
 5b6:	16 16       	cp	r1, r22
 5b8:	17 06       	cpc	r1, r23
 5ba:	18 06       	cpc	r1, r24
 5bc:	09 06       	cpc	r0, r25
 5be:	08 95       	ret

000005c0 <__fp_pscB>:
 5c0:	00 24       	eor	r0, r0
 5c2:	0a 94       	dec	r0
 5c4:	12 16       	cp	r1, r18
 5c6:	13 06       	cpc	r1, r19
 5c8:	14 06       	cpc	r1, r20
 5ca:	05 06       	cpc	r0, r21
 5cc:	08 95       	ret

000005ce <__fp_round>:
 5ce:	09 2e       	mov	r0, r25
 5d0:	03 94       	inc	r0
 5d2:	00 0c       	add	r0, r0
 5d4:	11 f4       	brne	.+4      	; 0x5da <__fp_round+0xc>
 5d6:	88 23       	and	r24, r24
 5d8:	52 f0       	brmi	.+20     	; 0x5ee <__fp_round+0x20>
 5da:	bb 0f       	add	r27, r27
 5dc:	40 f4       	brcc	.+16     	; 0x5ee <__fp_round+0x20>
 5de:	bf 2b       	or	r27, r31
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__fp_round+0x18>
 5e2:	60 ff       	sbrs	r22, 0
 5e4:	04 c0       	rjmp	.+8      	; 0x5ee <__fp_round+0x20>
 5e6:	6f 5f       	subi	r22, 0xFF	; 255
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	08 95       	ret

000005f0 <__fp_split3>:
 5f0:	57 fd       	sbrc	r21, 7
 5f2:	90 58       	subi	r25, 0x80	; 128
 5f4:	44 0f       	add	r20, r20
 5f6:	55 1f       	adc	r21, r21
 5f8:	59 f0       	breq	.+22     	; 0x610 <__fp_splitA+0x10>
 5fa:	5f 3f       	cpi	r21, 0xFF	; 255
 5fc:	71 f0       	breq	.+28     	; 0x61a <__fp_splitA+0x1a>
 5fe:	47 95       	ror	r20

00000600 <__fp_splitA>:
 600:	88 0f       	add	r24, r24
 602:	97 fb       	bst	r25, 7
 604:	99 1f       	adc	r25, r25
 606:	61 f0       	breq	.+24     	; 0x620 <__fp_splitA+0x20>
 608:	9f 3f       	cpi	r25, 0xFF	; 255
 60a:	79 f0       	breq	.+30     	; 0x62a <__fp_splitA+0x2a>
 60c:	87 95       	ror	r24
 60e:	08 95       	ret
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	14 06       	cpc	r1, r20
 616:	55 1f       	adc	r21, r21
 618:	f2 cf       	rjmp	.-28     	; 0x5fe <__fp_split3+0xe>
 61a:	46 95       	lsr	r20
 61c:	f1 df       	rcall	.-30     	; 0x600 <__fp_splitA>
 61e:	08 c0       	rjmp	.+16     	; 0x630 <__fp_splitA+0x30>
 620:	16 16       	cp	r1, r22
 622:	17 06       	cpc	r1, r23
 624:	18 06       	cpc	r1, r24
 626:	99 1f       	adc	r25, r25
 628:	f1 cf       	rjmp	.-30     	; 0x60c <__fp_splitA+0xc>
 62a:	86 95       	lsr	r24
 62c:	71 05       	cpc	r23, r1
 62e:	61 05       	cpc	r22, r1
 630:	08 94       	sec
 632:	08 95       	ret

00000634 <__fp_zero>:
 634:	e8 94       	clt

00000636 <__fp_szero>:
 636:	bb 27       	eor	r27, r27
 638:	66 27       	eor	r22, r22
 63a:	77 27       	eor	r23, r23
 63c:	cb 01       	movw	r24, r22
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret

00000642 <__mulsf3>:
 642:	0e 94 34 03 	call	0x668	; 0x668 <__mulsf3x>
 646:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_round>
 64a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_pscA>
 64e:	38 f0       	brcs	.+14     	; 0x65e <__mulsf3+0x1c>
 650:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_pscB>
 654:	20 f0       	brcs	.+8      	; 0x65e <__mulsf3+0x1c>
 656:	95 23       	and	r25, r21
 658:	11 f0       	breq	.+4      	; 0x65e <__mulsf3+0x1c>
 65a:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>
 65e:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_nan>
 662:	11 24       	eor	r1, r1
 664:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_szero>

00000668 <__mulsf3x>:
 668:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_split3>
 66c:	70 f3       	brcs	.-36     	; 0x64a <__mulsf3+0x8>

0000066e <__mulsf3_pse>:
 66e:	95 9f       	mul	r25, r21
 670:	c1 f3       	breq	.-16     	; 0x662 <__mulsf3+0x20>
 672:	95 0f       	add	r25, r21
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	55 1f       	adc	r21, r21
 678:	62 9f       	mul	r22, r18
 67a:	f0 01       	movw	r30, r0
 67c:	72 9f       	mul	r23, r18
 67e:	bb 27       	eor	r27, r27
 680:	f0 0d       	add	r31, r0
 682:	b1 1d       	adc	r27, r1
 684:	63 9f       	mul	r22, r19
 686:	aa 27       	eor	r26, r26
 688:	f0 0d       	add	r31, r0
 68a:	b1 1d       	adc	r27, r1
 68c:	aa 1f       	adc	r26, r26
 68e:	64 9f       	mul	r22, r20
 690:	66 27       	eor	r22, r22
 692:	b0 0d       	add	r27, r0
 694:	a1 1d       	adc	r26, r1
 696:	66 1f       	adc	r22, r22
 698:	82 9f       	mul	r24, r18
 69a:	22 27       	eor	r18, r18
 69c:	b0 0d       	add	r27, r0
 69e:	a1 1d       	adc	r26, r1
 6a0:	62 1f       	adc	r22, r18
 6a2:	73 9f       	mul	r23, r19
 6a4:	b0 0d       	add	r27, r0
 6a6:	a1 1d       	adc	r26, r1
 6a8:	62 1f       	adc	r22, r18
 6aa:	83 9f       	mul	r24, r19
 6ac:	a0 0d       	add	r26, r0
 6ae:	61 1d       	adc	r22, r1
 6b0:	22 1f       	adc	r18, r18
 6b2:	74 9f       	mul	r23, r20
 6b4:	33 27       	eor	r19, r19
 6b6:	a0 0d       	add	r26, r0
 6b8:	61 1d       	adc	r22, r1
 6ba:	23 1f       	adc	r18, r19
 6bc:	84 9f       	mul	r24, r20
 6be:	60 0d       	add	r22, r0
 6c0:	21 1d       	adc	r18, r1
 6c2:	82 2f       	mov	r24, r18
 6c4:	76 2f       	mov	r23, r22
 6c6:	6a 2f       	mov	r22, r26
 6c8:	11 24       	eor	r1, r1
 6ca:	9f 57       	subi	r25, 0x7F	; 127
 6cc:	50 40       	sbci	r21, 0x00	; 0
 6ce:	9a f0       	brmi	.+38     	; 0x6f6 <__mulsf3_pse+0x88>
 6d0:	f1 f0       	breq	.+60     	; 0x70e <__mulsf3_pse+0xa0>
 6d2:	88 23       	and	r24, r24
 6d4:	4a f0       	brmi	.+18     	; 0x6e8 <__mulsf3_pse+0x7a>
 6d6:	ee 0f       	add	r30, r30
 6d8:	ff 1f       	adc	r31, r31
 6da:	bb 1f       	adc	r27, r27
 6dc:	66 1f       	adc	r22, r22
 6de:	77 1f       	adc	r23, r23
 6e0:	88 1f       	adc	r24, r24
 6e2:	91 50       	subi	r25, 0x01	; 1
 6e4:	50 40       	sbci	r21, 0x00	; 0
 6e6:	a9 f7       	brne	.-22     	; 0x6d2 <__mulsf3_pse+0x64>
 6e8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ea:	51 05       	cpc	r21, r1
 6ec:	80 f0       	brcs	.+32     	; 0x70e <__mulsf3_pse+0xa0>
 6ee:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>
 6f2:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_szero>
 6f6:	5f 3f       	cpi	r21, 0xFF	; 255
 6f8:	e4 f3       	brlt	.-8      	; 0x6f2 <__mulsf3_pse+0x84>
 6fa:	98 3e       	cpi	r25, 0xE8	; 232
 6fc:	d4 f3       	brlt	.-12     	; 0x6f2 <__mulsf3_pse+0x84>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f7 95       	ror	r31
 708:	e7 95       	ror	r30
 70a:	9f 5f       	subi	r25, 0xFF	; 255
 70c:	c1 f7       	brne	.-16     	; 0x6fe <__mulsf3_pse+0x90>
 70e:	fe 2b       	or	r31, r30
 710:	88 0f       	add	r24, r24
 712:	91 1d       	adc	r25, r1
 714:	96 95       	lsr	r25
 716:	87 95       	ror	r24
 718:	97 f9       	bld	r25, 7
 71a:	08 95       	ret

0000071c <__divmodhi4>:
 71c:	97 fb       	bst	r25, 7
 71e:	07 2e       	mov	r0, r23
 720:	16 f4       	brtc	.+4      	; 0x726 <__divmodhi4+0xa>
 722:	00 94       	com	r0
 724:	07 d0       	rcall	.+14     	; 0x734 <__divmodhi4_neg1>
 726:	77 fd       	sbrc	r23, 7
 728:	09 d0       	rcall	.+18     	; 0x73c <__divmodhi4_neg2>
 72a:	0e 94 a2 03 	call	0x744	; 0x744 <__udivmodhi4>
 72e:	07 fc       	sbrc	r0, 7
 730:	05 d0       	rcall	.+10     	; 0x73c <__divmodhi4_neg2>
 732:	3e f4       	brtc	.+14     	; 0x742 <__divmodhi4_exit>

00000734 <__divmodhi4_neg1>:
 734:	90 95       	com	r25
 736:	81 95       	neg	r24
 738:	9f 4f       	sbci	r25, 0xFF	; 255
 73a:	08 95       	ret

0000073c <__divmodhi4_neg2>:
 73c:	70 95       	com	r23
 73e:	61 95       	neg	r22
 740:	7f 4f       	sbci	r23, 0xFF	; 255

00000742 <__divmodhi4_exit>:
 742:	08 95       	ret

00000744 <__udivmodhi4>:
 744:	aa 1b       	sub	r26, r26
 746:	bb 1b       	sub	r27, r27
 748:	51 e1       	ldi	r21, 0x11	; 17
 74a:	07 c0       	rjmp	.+14     	; 0x75a <__udivmodhi4_ep>

0000074c <__udivmodhi4_loop>:
 74c:	aa 1f       	adc	r26, r26
 74e:	bb 1f       	adc	r27, r27
 750:	a6 17       	cp	r26, r22
 752:	b7 07       	cpc	r27, r23
 754:	10 f0       	brcs	.+4      	; 0x75a <__udivmodhi4_ep>
 756:	a6 1b       	sub	r26, r22
 758:	b7 0b       	sbc	r27, r23

0000075a <__udivmodhi4_ep>:
 75a:	88 1f       	adc	r24, r24
 75c:	99 1f       	adc	r25, r25
 75e:	5a 95       	dec	r21
 760:	a9 f7       	brne	.-22     	; 0x74c <__udivmodhi4_loop>
 762:	80 95       	com	r24
 764:	90 95       	com	r25
 766:	bc 01       	movw	r22, r24
 768:	cd 01       	movw	r24, r26
 76a:	08 95       	ret

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>
